local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local Madzlib = {Themes = {}, Save = {UISize = {550, 380}, TabSize = 160, Theme = "Darker"}, Settings = {}, Connection = {}, Instances = {}, Elements = {}, Options = {}, Flags = {}, Tabs = {}, Icons = {}}
local Theme = Madzlib.Themes["Darker"]
local ContainerList = {}
local db = false
local dbConnection = Madzlib.Connection

function Madzlib:SaveFile(Name, Content)
    if writefile then
        local Success, Error = pcall(writefile, Name, Content)
        if not Success then
            warn("Madzlib: Failed to save file - " .. (Error or "Unknown error"))
        end
    end
end

function Madzlib:LoadFile(Name)
    if readfile and isfile and isfile(Name) then
        local Success, Content = pcall(readfile, Name)
        if Success then
            return Content
        end
    end
    return nil
end

local function SaveJson(Filename, Data)
    Madzlib:SaveFile(Filename, HttpService:JSONEncode(Data))
end

local function Create(Class, Parent, Properties, Children)
    local Instance = Instance.new(Class)
    if Properties then
        for Property, Value in pairs(Properties) do
            Instance[Property] = Value
        end
    end
    if Children then
        for _, Child in pairs(Children) do
            Child.Parent = Instance
        end
    end
    if Parent then
        Instance.Parent = Parent
    end
    return Instance
end

local function SetProps(Instance, Properties)
    if Properties then
        for Property, Value in pairs(Properties) do
            Instance[Property] = Value
        end
    end
    return Instance
end

local function SetChildren(Parent, Children)
    if Children then
        for _, Child in pairs(Children) do
            Child.Parent = Parent
        end
    end
    return Parent
end

local function CreateTween(Configs)
    local Instance = Configs[1]
    local Property = Configs[2]
    local Goal = Configs[3]
    local Duration = Configs[4] or 0.5
    local IgnoreCallback = Configs[5]
    local TweenInfo = TweenInfo.new(Duration, Enum.EasingStyle.Quint)
    local Tween = TweenService:Create(Instance, TweenInfo, {[Property] = Goal})
    Tween:Play()
    if not IgnoreCallback then
        Tween.Completed:Wait()
    end
    return Tween
end

local function MakeDrag(Instance)
    task.spawn(function()
        SetProps(Instance, {Active = true, AutoButtonColor = false})
        local DragStart, StartPos, InputOn
        local function Update(Input)
            local Delta = Input.Position - DragStart
            Instance.Position = UDim2.new(StartPos.X.Scale, StartPos.X.Offset + Delta.X, StartPos.Y.Scale, StartPos.Y.Offset + Delta.Y)
        end
        Instance.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
                DragStart = Input.Position
                StartPos = Instance.Position
                InputOn = true
            end
        end)
        Instance.InputChanged:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
                if InputOn then
                    Update(Input)
                end
            end
        end)
        UserInputService.InputEnded:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
                InputOn = false
            end
        end)
    end)
end

local function GetStr(Str)
    return type(Str) == "string" and Str or ""
end

local function VerifyTheme(ThemeName)
    return Madzlib.Themes[ThemeName] ~= nil
end

local function ConnectSave(Instance, Callback)
    Instance:GetPropertyChangedSignal("Position"):Connect(Callback)
end

local Funcs = {}
function Funcs:GetCallback(Configs, Index)
    local Callback = Configs[Index] or Configs.Callback or Configs.Func or function() end
    return type(Callback) == "function" and Callback or function() end
end

function Funcs:FireCallback(Callback, ...)
    if type(Callback) == "function" then
        Callback(...)
    end
end

function Funcs:InsertCallback(OldCallback, NewCallback)
    return function(...)
        OldCallback(...)
        if type(NewCallback) == "function" then
            NewCallback(...)
        end
    end
end

function Funcs:ToggleVisible(Instance, Bool)
    if Bool == nil then
        Instance.Visible = not Instance.Visible
        return
    end
    Instance.Visible = Bool
end

local function InsertTheme(Instance, ThemeType)
    table.insert(Madzlib.Instances, {Instance = Instance, Type = ThemeType})
    return Instance
end

local function AddEle(Name, Func)
    Madzlib.Elements[Name] = Func
end

AddEle("Corner", function(parent, CornerRadius)
    local New = SetProps(Create("UICorner", parent, {CornerRadius = CornerRadius or UDim.new(0, 7)}))
    return New
end)

AddEle("Stroke", function(parent, props, ...)
    local args = {...}
    local New = InsertTheme(SetProps(Create("UIStroke", parent, {Color = args[1] or Theme["Color Stroke"], Thickness = args[2] or 1, ApplyStrokeMode = "Border"}), props), "Stroke")
    return New
end)

AddEle("Button", function(parent, props, ...)
    local args = {...}
    local New = InsertTheme(SetProps(Create("TextButton", parent, {Text = "", Size = UDim2.fromScale(1, 1), BackgroundColor3 = Theme["Color Hub 2"], AutoButtonColor = false}), props), "Frame")
    New.MouseEnter:Connect(function()
        New.BackgroundTransparency = 0.4
    end)
    New.MouseLeave:Connect(function()
        New.BackgroundTransparency = 0
    end)
    if args[1] then
        New.Activated:Connect(args[1])
    end
    return New
end)

AddEle("Gradient", function(parent, props, ...)
    local args = {...}
    local New = InsertTheme(SetProps(Create("UIGradient", parent, {Color = Theme["Color Hub 1"]}), props), "Gradient")
    return New
end)

local Make = function(Ele, Instance, ...)
    local Element = Madzlib.Elements[Ele](Instance, ...)
    return Element
end

Madzlib.Icons = {
    ["serveroff"] = "rbxassetid://10734944668",["settings"] = "rbxassetid://10734950309",["settings2"] = "rbxassetid://10734950020",["share"] = "rbxassetid://10734950813",["share2"] = "rbxassetid://10734950553",["sheet"] = "rbxassetid://10734951038",["shield"] = "rbxassetid://10734951847",["shieldalert"] = "rbxassetid://10734951173",["shieldcheck"] = "rbxassetid://10734951367",["shieldclose"] = "rbxassetid://10734951535",["shieldoff"] = "rbxassetid://10734951684",["shirt"] = "rbxassetid://10734952036",["shoppingbag"] = "rbxassetid://10734952273",["shoppingcart"] = "rbxassetid://10734952479",
    ["cloudmoon"] = "rbxassetid://10709805942",["cloudmoonrain"] = "rbxassetid://10709805838",["cloudoff"] = "rbxassetid://10709806060",["cloudrain"] = "rbxassetid://10709806277",["cloudrainwind"] = "rbxassetid://10709806166",["cloudsnow"] = "rbxassetid://10709806374",["cloudsun"] = "rbxassetid://10709806631",["cloudsunrain"] = "rbxassetid://10709806475",["cloudy"] = "rbxassetid://10709806859",["clover"] = "rbxassetid://10709806995",["code"] = "rbxassetid://10709810463",["code2"] = "rbxassetid://10709807111",["codepen"] = "rbxassetid://10709810534",["codesandbox"] = "rbxassetid://10709810676",
    ["dices"] = "rbxassetid://10723343321",["diff"] = "rbxassetid://10723343416",["disc"] = "rbxassetid://10723343537",["divide"] = "rbxassetid://10723343805",["dividecircle"] = "rbxassetid://10723343636",["dividesquare"] = "rbxassetid://10723343737",["dollarsign"] = "rbxassetid://10723343958",["download"] = "rbxassetid://10723344270",["downloadcloud"] = "rbxassetid://10723344088",["droplet"] = "rbxassetid://10723344432",["droplets"] = "rbxassetid://10734883356",["drumstick"] = "rbxassetid://10723344737",["edit"] = "rbxassetid://10734883598",["edit2"] = "rbxassetid://10723344885",
    ["edit3"] = "rbxassetid://10723345088",["egg"] = "rbxassetid://10723345518",["eggfried"] = "rbxassetid://10723345347",["electricity"] = "rbxassetid://10723345749",["electricityoff"] = "rbxassetid://10723345643",["equal"] = "rbxassetid://10723345990",["equalnot"] = "rbxassetid://10723345866",["eraser"] = "rbxassetid://10723346158",["euro"] = "rbxassetid://10723346372",["expand"] = "rbxassetid://10723346553",["externallink"] = "rbxassetid://10723346684",["eye"] = "rbxassetid://10723346959",["eyeoff"] = "rbxassetid://10723346871",["factory"] = "rbxassetid://10723347051",
    ["import"] = "rbxassetid://10723415205",["inbox"] = "rbxassetid://10723415335",["indent"] = "rbxassetid://10723415494",["indianrupee"] = "rbxassetid://10723415642",["infinity"] = "rbxassetid://10723415766",["info"] = "rbxassetid://10723415903",["inspect"] = "rbxassetid://10723416057",["italic"] = "rbxassetid://10723416195",["japaneseyen"] = "rbxassetid://10723416363",["joystick"] = "rbxassetid://10723416527",["key"] = "rbxassetid://10723416652",["keyboard"] = "rbxassetid://10723416765",["lamp"] = "rbxassetid://10723417513",["lampceiling"] = "rbxassetid://10723416922",
    ["lampdesk"] = "rbxassetid://10723417016",["lampfloor"] = "rbxassetid://10723417131",["lampwalldown"] = "rbxassetid://10723417240",["lampwallup"] = "rbxassetid://10723417356",["landmark"] = "rbxassetid://10723417608",["languages"] = "rbxassetid://10723417703",["laptop"] = "rbxassetid://10723423881",["laptop2"] = "rbxassetid://10723417797",["lasso"] = "rbxassetid://10723424235",["lassoselect"] = "rbxassetid://10723424058",["laugh"] = "rbxassetid://10723424372",["layers"] = "rbxassetid://10723424505",["layout"] = "rbxassetid://10723425376",["layoutdashboard"] = "rbxassetid://10723424646",
    ["layoutgrid"] = "rbxassetid://10723424838",["layoutlist"] = "rbxassetid://10723424963",["layouttemplate"] = "rbxassetid://10723425187",["leaf"] = "rbxassetid://10723425539",["library"] = "rbxassetid://10723425615",["lifebuoy"] = "rbxassetid://10723425685",["lightbulb"] = "rbxassetid://10723425852",["lightbulboff"] = "rbxassetid://10723425762",["linechart"] = "rbxassetid://10723426393",["link"] = "rbxassetid://10723426722",["link2"] = "rbxassetid://10723426595",["link2off"] = "rbxassetid://10723426513",["list"] = "rbxassetid://10723433811",["listchecks"] = "rbxassetid://10734884548",
    ["recycle"] = "rbxassetid://10734932295",["redo"] = "rbxassetid://10734932822",["redo2"] = "rbxassetid://10734932586",["refreshccw"] = "rbxassetid://10734933056",["refreshcw"] = "rbxassetid://10734933222",["refrigerator"] = "rbxassetid://10734933465",["regex"] = "rbxassetid://10734933655",["repeat"] = "rbxassetid://10734933966",["repeat1"] = "rbxassetid://10734933826",["reply"] = "rbxassetid://10734934252",["replyall"] = "rbxassetid://10734934132",["rewind"] = "rbxassetid://10734934347",["rocket"] = "rbxassetid://10734934585",["rockingchair"] = "rbxassetid://10734939942",
    ["alignjustify"] = "rbxassetid://10709759610",["alignleft"] = "rbxassetid://10709759764",["alignright"] = "rbxassetid://10709759895",["alignstarthorizontal"] = "rbxassetid://10709760051",["alignstartvertical"] = "rbxassetid://10709760244",["alignverticaldistributecenter"] = "rbxassetid://10709760351",["alignverticaldistributeend"] = "rbxassetid://10709760434",["alignverticaldistributestart"] = "rbxassetid://10709760612",["alignverticaljustifycenter"] = "rbxassetid://10709760814",["alignverticaljustifyend"] = "rbxassetid://10709761003",["alignverticaljustifystart"] = "rbxassetid://10709761176",
    ["alignverticalspacearound"] = "rbxassetid://10709761324",["alignverticalspacebetween"] = "rbxassetid://10709761434",["anchor"] = "rbxassetid://10709761530",["angry"] = "rbxassetid://10709761629",["annoyed"] = "rbxassetid://10709761722",["aperture"] = "rbxassetid://10709761813",["apple"] = "rbxassetid://10709761889",["archive"] = "rbxassetid://10709762233",["archiverestore"] = "rbxassetid://10709762058",["armchair"] = "rbxassetid://10709762327",["arrowbigdown"] = "rbxassetid://10747796644",["arrowbigleft"] = "rbxassetid://10709762574",["arrowbigright"] = "rbxassetid://10709762727",
    ["accessibility"] = "rbxassetid://10709751939",["activity"] = "rbxassetid://10709752035",["airvent"] = "rbxassetid://10709752131"
}

Madzlib.Themes = {
    Darker = {
        ["Color Hub 1"] = ColorSequence.new({ColorSequenceKeypoint.new(0.00, Color3.fromRGB(25, 25, 25)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(32.5, 32.5, 32.5)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(25, 25, 25))}),
        ["Color Hub 2"] = Color3.fromRGB(30, 30, 30),
        ["Color Stroke"] = Color3.fromRGB(40, 40, 40),
        ["Color Theme"] = Color3.fromRGB(88, 101, 242),
        ["Color Text"] = Color3.fromRGB(243, 243, 243),
        ["Color Dark Text"] = Color3.fromRGB(180, 180, 180)
    },
    Dark = {
        ["Color Hub 1"] = ColorSequence.new({ColorSequenceKeypoint.new(0.00, Color3.fromRGB(40, 40, 40)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(47.5, 47.5, 47.5)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(40, 40, 40))}),
        ["Color Hub 2"] = Color3.fromRGB(45, 45, 45),
        ["Color Stroke"] = Color3.fromRGB(50, 50, 50),
        ["Color Theme"] = Color3.fromRGB(150, 0, 255),
        ["Color Text"] = Color3.fromRGB(240, 240, 240),
        ["Color Dark Text"] = Color3.fromRGB(180, 180, 180)
    }
}

function Madzlib:GetIcon(index)
    if type(index) ~= "string" or index:find("rbxassetid://") or #index == 0 then
        return index
    end
    local firstMatch = nil
    index = string.lower(index):gsub("lucide", ""):gsub("-", "")
    if self.Icons[index] then
        return self.Icons[index]
    end
    for Name, Icon in self.Icons do
        if Name == index then
            return Icon
        elseif not firstMatch and Name:find(index, 1, true) then
            firstMatch = Icon
        end
    end
    return firstMatch or index
end

function Madzlib:SetTheme(NewTheme)
    if not VerifyTheme(NewTheme) then return end
    Madzlib.Save.Theme = NewTheme
    SaveJson("redz library V5.json", Madzlib.Save)
    Theme = Madzlib.Themes[NewTheme]
    dbConnection:Fire("ThemeChanged", NewTheme)
    for _, Val in pairs(Madzlib.Instances) do
        if Val.Type == "Gradient" then
            Val.Instance.Color = Theme["Color Hub 1"]
        elseif Val.Type == "Frame" or Val.Type == "ScrollingFrame" then
            Val.Instance.BackgroundColor3 = Theme[Val.Type == "ScrollingFrame" and "Color Hub 2" or "Color Hub 2"]
        elseif Val.Type == "Text" then
            Val.Instance.TextColor3 = Theme["Color Text"]
        elseif Val.Type == "DarkText" then
            Val.Instance.TextColor3 = Theme["Color Dark Text"]
        elseif Val.Type == "Stroke" then
            Val.Instance.Color = Theme["Color Stroke"]
        elseif Val.Type == "Theme" then
            Val.Instance.BackgroundColor3 = Theme["Color Theme"]
        end
    end
end

local function NewConnectionList(List)
    for _, Name in pairs(List) do
        Madzlib.Connection[Name] = {}
        function Madzlib.Connection[Name]:Connect(Func)
            table.insert(self, Func)
        end
        function Madzlib.Connection[Name]:Fire(...)
            for _, Func in pairs(self) do
                task.spawn(Func, ...)
            end
        end
    end
end

NewConnectionList({"FlagsChanged", "ThemeChanged", "FileSaved", "ThemeChanging", "OptionAdded"})

local GetFlag, SetFlag, CheckFlag
CheckFlag = function(Name)
    return type(Name) == "string" and Madzlib.Flags[Name] ~= nil
end
GetFlag = function(Name)
    return type(Name) == "string" and Madzlib.Flags[Name]
end
SetFlag = function(Flag, Value)
    if Flag and (Value ~= Madzlib.Flags[Flag] or type(Value) == "table") then
        Madzlib.Flags[Flag] = Value
        dbConnection:Fire("FlagsChanged", Flag, Value)
    end
end

local ScriptFile = Madzlib.Settings.ScriptFile
if ScriptFile and writefile then
    local loadedData = Madzlib:LoadFile(ScriptFile)
    if loadedData then
        local Success, Decoded = pcall(HttpService.JSONDecode, HttpService, loadedData)
        if Success and type(Decoded) == "table" then
            Madzlib.Flags = Decoded
        end
    end
end

local UIScaleValue = 1
local ScreenGui = Create("ScreenGui", CoreGui, {Name = "redz Library V5"}, {Create("UIScale", {Scale = UIScaleValue, Name = "Scale"})})

local MainFrame = Create("Frame", ScreenGui, {Size = UDim2.fromOffset(Madzlib.Save.UISize[1], Madzlib.Save.UISize[2]), Position = UDim2.fromScale(0.5, 0.5), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Theme["Color Hub 2"], Active = true})
Make("Corner", MainFrame, UDim.new(0, 6))
local MainGradient = Make("Gradient", MainFrame)
local MainCorner = Make("Corner", MainFrame, UDim.new(0, 6))

local TopBar = Create("Frame", MainFrame, {Size = UDim2.new(1, 0, 0, 40), BackgroundColor3 = Theme["Color Hub 2"], Name = "TopBar"})
Make("Corner", TopBar, UDim.new(0, 6))
Make("Stroke", TopBar)

local Title = Create("TextLabel", TopBar, {Size = UDim2.new(1, -50, 1, 0), Position = UDim2.new(0, 10, 0), Font = Enum.Font.GothamBold, Text = "Madz Hub", TextColor3 = Theme["Color Text"], TextSize = 14, TextXAlignment = "Left", BackgroundTransparency = 1, Name = "Title"})
local SubTitle = Create("TextLabel", TopBar, {Size = UDim2.new(1, -50, 0, 10), Position = UDim2.new(0, 10, 1, -5), AnchorPoint = Vector2.new(0, 1), Text = "By Madzhub", TextColor3 = Theme["Color Dark Text"], BackgroundTransparency = 1, TextXAlignment = "Left", TextYAlignment = "Bottom", TextSize = 8, Font = Enum.Font.Gotham, Name = "SubTitle"})

local Components = Create("Frame", MainFrame, {Size = UDim2.new(1, 0, 1, -TopBar.Size.Y.Offset), Position = UDim2.new(0, 0, 0, TopBar.Size.Y.Offset), Name = "Components"})

local MainScroll = InsertTheme(Create("ScrollingFrame", Components, {Size = UDim2.new(0, Madzlib.Save.TabSize, 1, -TopBar.Size.Y.Offset), ScrollBarImageColor3 = Theme["Color Theme"], Position = UDim2.new(0, 0, 1, 0), AnchorPoint = Vector2.new(0, 1), ScrollBarThickness = 1.5, BackgroundTransparency = 1, Name = "MainScroll"}), "ScrollBar")
local Containers = Create("Folder", Components, {Size = UDim2.new(1, -MainScroll.Size.X.Offset, 1, -TopBar.Size.Y.Offset), Position = UDim2.new(0, MainScroll.Size.X.Offset, 1, 0), AnchorPoint = Vector2.new(0, 1), BackgroundTransparency = 1, Name = "Containers"})

local ControlSize1, ControlSize2 = MakeDrag(Create("ImageButton", MainFrame, {Size = UDim2.new(0, 35, 0, 35), Position = MainFrame.Size, Active = true, AnchorPoint = Vector2.new(0.8, 0.8), BackgroundTransparency = 1, Name = "Control Hub Size"})), MakeDrag(Create("ImageButton", MainFrame, {Size = UDim2.new(0, 20, 1, -30), Position = UDim2.new(0, MainScroll.Size.X.Offset, 1, 0), AnchorPoint = Vector2.new(0.5, 1), Active = true, BackgroundTransparency = 1, Name = "Control Tab Size"}))

local function ControlSize()
    if not Minimized then
        MainScroll.Size = UDim2.new(0, ControlSize2.AbsolutePosition.X - MainFrame.AbsolutePosition.X, 1, -TopBar.Size.Y.Offset)
        Containers.Size = UDim2.new(1, -MainScroll.Size.X.Offset, 1, -TopBar.Size.Y.Offset)
    end
end

ControlSize1:GetPropertyChangedSignal("Position"):Connect(ControlSize)
ControlSize2:GetPropertyChangedSignal("Position"):Connect(ControlSize)

ConnectSave(ControlSize1, function()
    if not Minimized then
        Madzlib.Save.UISize = {MainFrame.Size.X.Offset, MainFrame.Size.Y.Offset}
        SaveJson("redz library V5.json", Madzlib.Save)
    end
end)
ConnectSave(ControlSize2, function()
    Madzlib.Save.TabSize = MainScroll.Size.X.Offset
    SaveJson("redz library V5.json", Madzlib.Save)
end)

local ButtonsFolder = Create("Folder", TopBar, {Name = "Buttons"})
local CloseButton = Create("ImageButton", {Size = UDim2.new(0, 14, 0, 14), Position = UDim2.new(1, -10, 0.5), AnchorPoint = Vector2.new(1, 0.5), BackgroundTransparency = 1, Image = "rbxassetid://10747384394", AutoButtonColor = false, Name = "Close"})
local MinimizeButton = SetProps(CloseButton:Clone(), {Position = UDim2.new(1, -35, 0.5), Image = "rbxassetid://10734896206", Name = "Minimize"})
SetChildren(ButtonsFolder, {CloseButton, MinimizeButton})

local Minimized, SaveSize, WaitClick

local Window = {}
function Window:CloseBtn()
    local Dialog = Window:Dialog({Title = "Close", Text = "You Want Close Ui?", Options = {{"Confirm", function()
        ScreenGui:Destroy()
    end}, {"Cancel"}}})
end

function Window:MinimizeBtn()
    if WaitClick then return end
    WaitClick = true
    if Minimized then
        MinimizeButton.Image = "rbxassetid://10734896206"
        CreateTween({MainFrame, "Size", SaveSize, 0.25, true})
        ControlSize1.Visible = true
        ControlSize2.Visible = true
        Minimized = false
    else
        MinimizeButton.Image = "rbxassetid://10734924532"
        SaveSize = MainFrame.Size
        ControlSize1.Visible = false
        ControlSize2.Visible = false
        CreateTween({MainFrame, "Size", UDim2.fromOffset(MainFrame.Size.X.Offset, 28), 0.25, true})
        Minimized = true
    end
    WaitClick = false
end

function Window:Minimize()
    MainFrame.Visible = not MainFrame.Visible
end

function Window:AddMinimizeButton(Configs)
    local WMiniText = Configs[1] or Configs.Text or "Minimize"
    local Title = Create("TextLabel", TopBar, {Size = UDim2.new(1, -100, 1, 0), Position = UDim2.new(0, 50, 0), Font = Enum.Font.Gotham, Text = "", TextColor3 = Theme["Color Text"], TextSize = 10, TextXAlignment = "Left", BackgroundTransparency = 1, Name = "MiniTitle"})
    local SubTitle = Create("TextLabel", TopBar, {Size = UDim2.new(1, -100, 0, 10), Position = UDim2.new(0, 50, 1, -5), AnchorPoint = Vector2.new(0, 1), Font = Enum.Font.Gotham, Text = WMiniText, TextColor3 = Theme["Color Dark Text"], BackgroundTransparency = 1, TextXAlignment = "Left", TextYAlignment = "Bottom", TextSize = 8, Font = Enum.Font.Gotham, Name = "SubTitle"})
    return {Set = function(Val1, Val2)
        if type(Val1) == "string" and type(Val2) == "string" then
            Title.Text = Val1
            SubTitle.Text = Val2
        elseif type(Val1) == "string" then
            Title.Text = Val1
        end
    end}
end

function Window:Dialog(Configs)
    if MainFrame:FindFirstChild("Dialog") then return end
    if Minimized then
        Window:MinimizeBtn()
    end
    local DTitle = Configs[1] or Configs.Title or "Dialog"
    local DText = Configs[2] or Configs.Text or "This is a Dialog"
    local DOptions = Configs[3] or Configs.Options or {}
    local Frame = Create("Frame", {Active = true, Size = UDim2.fromOffset(250 * 1.08, 150 * 1.08), Position = UDim2.fromScale(0.5, 0.5), AnchorPoint = Vector2.new(0.5, 0.5)}, {
        InsertTheme(Create("TextLabel", {Font = Enum.Font.GothamBold, Size = UDim2.new(1, 0, 0, 20), Text = DTitle, TextXAlignment = "Left", TextColor3 = Theme["Color Text"], TextSize = 15, Position = UDim2.fromOffset(15, 5), BackgroundTransparency = 1}), "Text"),
        InsertTheme(Create("TextLabel", {Font = Enum.Font.GothamMedium, Size = UDim2.new(1, -25), AutomaticSize = "Y", Text = DText, TextXAlignment = "Left", TextColor3 = Theme["Color Dark Text"], TextSize = 12, Position = UDim2.fromOffset(15, 25), BackgroundTransparency = 1, TextWrapped = true}), "DarkText")
    })
    Make("Gradient", Frame, {Rotation = 270})
    Make("Corner", Frame)
    local ButtonsHolder = Create("Frame", Frame, {Size = UDim2.fromScale(1, 0.35), Position = UDim2.fromScale(0, 1), AnchorPoint = Vector2.new(0, 1), BackgroundColor3 = Theme["Color Hub 2"], BackgroundTransparency = 1}, {Create("UIListLayout", {Padding = UDim.new(0, 10), VerticalAlignment = "Center", FillDirection = "Horizontal", HorizontalAlignment = "Center"})})
    local Screen = InsertTheme(Create("Frame", MainFrame, {BackgroundTransparency = 0.6, Active = true, BackgroundColor3 = Theme["Color Hub 2"], Size = UDim2.new(1, 0, 1, 0), BackgroundColor3 = Theme["Color Stroke"], Name = "Dialog"}), "Stroke")
    MainCorner:Clone().Parent = Screen
    Frame.Parent = Screen
    CreateTween({Frame, "Size", UDim2.fromOffset(250, 150), 0.2})
    CreateTween({Frame, "Transparency", 0, 0.15})
    CreateTween({Screen, "Transparency", 0.3, 0.15})

    local ButtonCount, Dialog = 1, {}
    function Dialog:Button(Configs)
        local Name = Configs[1] or Configs.Name or Configs.Title or ""
        local Callback = Configs[2] or Configs.Callback or function() end
        ButtonCount = ButtonCount + 1
        local Button = Make("Button", ButtonsHolder)
        Make("Corner", Button)
        SetProps(Button, {Text = Name, Font = Enum.Font.GothamBold, TextColor3 = Theme["Color Text"], TextSize = 12})
        for _, Button in pairs(ButtonsHolder:GetChildren()) do
            if Button:IsA("TextButton") then
                Button.Size = UDim2.new(1 / ButtonCount, -(((ButtonCount - 1) * 20) / ButtonCount), 0, 32)
            end
        end
        Button.Activated:Connect(Dialog.Close)
        Button.Activated:Connect(Callback)
    end

    for _, Option in pairs(DOptions) do
        Dialog:Button(Option)
    end

    function Dialog:Close()
        CreateTween({Frame, "Size", UDim2.fromOffset(250 * 1.08, 150 * 1.08), 0.2})
        CreateTween({Screen, "Transparency", 1, 0.15})
        CreateTween({Frame, "Transparency", 1, 0.15, true})
        Screen:Destroy()
    end
    return Dialog
end

local FirstTab = true
function Window:AddTab(Configs)
    local TName = Configs[1] or Configs.Name or Configs.Title or "Tab"
    local TIcon = Configs[2] or Configs.Icon or ""
    TIcon = Madzlib:GetIcon(TIcon)
    if not TIcon:find("rbxassetid://") or TIcon:gsub("rbxassetid://", ""):len() < 6 then
        TIcon = false
    end
    local TabSelect = Make("Button", MainScroll, {Size = UDim2.new(1, 0, 0, 24)})
    Make("Corner", TabSelect)
    local LabelTitle = InsertTheme(Create("TextLabel", TabSelect, {Size = UDim2.new(1, TIcon and -25 or -15, 1), Position = UDim2.fromOffset(TIcon and 25 or 15), BackgroundTransparency = 1, Font = Enum.Font.GothamMedium, Text = TName, TextColor3 = Theme["Color Text"], TextSize = 10, TextXAlignment = Enum.TextXAlignment.Left, TextTransparency = (FirstTab and 0.3) or 0, TextTruncate = "AtEnd"}), "Text")
    local LabelIcon = InsertTheme(Create("ImageLabel", TabSelect, {Position = UDim2.new(0, 8, 0.5), Size = UDim2.new(0, 13, 0, 13), AnchorPoint = Vector2.new(0, 0.5), Image = TIcon or "", BackgroundTransparency = 1, ImageTransparency = (FirstTab and 0.3) or 0}), "Text")
    local Selected = InsertTheme(Create("Frame", TabSelect, {Size = FirstTab and UDim2.new(0, 4, 0, 4) or UDim2.new(0, 4, 0, 13), Position = UDim2.new(0, 1, 0.5), AnchorPoint = Vector2.new(0, 0.5), BackgroundColor3 = Theme["Color Theme"], BackgroundTransparency = FirstTab and 1 or 0}), "Theme")
    Make("Corner", Selected, UDim.new(0.5, 0))

    local Container = InsertTheme(Create("ScrollingFrame", {Size = UDim2.new(1, 0, 1, 0), Position = UDim2.new(0, 0, 1), AnchorPoint = Vector2.new(0, 1), ScrollBarThickness = 1.5, BackgroundTransparency = 1, ScrollBarImageTransparency = 0.2, ScrollBarImageColor3 = Theme["Color Theme"], AutomaticCanvasSize = "Y", ScrollingDirection = "Y", BorderSizePixel = 0, CanvasSize = UDim2.new(), Name = ("Container %i [ %s ]"):format(#ContainerList + 1, TName)}, {
        Create("UIPadding", {PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10), PaddingTop = UDim.new(0, 10), PaddingBottom = UDim.new(0, 10)}),
        Create("UIListLayout", {Padding = UDim.new(0, 5)})
    }), "ScrollBar")
    table.insert(ContainerList, Container)
    if not FirstTab then
        Container.Parent = Containers
    end

    local function Tabs()
        if Container.Parent then return end
        for _, Frame in pairs(ContainerList) do
            if Frame:IsA("ScrollingFrame") and Frame ~= Container then
                Frame.Parent = nil
            end
        end
        Container.Parent = Containers
        Container.Size = UDim2.new(1, 0, 1, 150)
        for _, Tab in pairs(Madzlib.Tabs) do
            if Tab.Cont ~= Container then
                Tab.func:Disable()
            end
        end
    end

    if FirstTab then
        FirstTab = false
        Tabs()
    end
    TabSelect.Activated:Connect(Tabs)

    local Tab = {}
    function Tab:Disable()
        Selected.BackgroundTransparency = 1
        LabelTitle.TextTransparency = 0.3
        if LabelIcon.Image then
            LabelIcon.ImageTransparency = 0.3
        end
    end
    function Tab:Enable()
        Selected.BackgroundTransparency = 0
        LabelTitle.TextTransparency = 0
        if LabelIcon.Image then
            LabelIcon.ImageTransparency = 0
        end
    end

    local function ButtonFrame(Parent, Name, Desc, Size)
        local HolderSize = Size or UDim2.new(1, -45, 0, 0)
        local TitleL = InsertTheme(Create("TextLabel", {Size = UDim2.new(1, 0, 0, 15), Position = UDim2.new(0, 12, 0, 5), BackgroundTransparency = 1, Text = Name, TextColor3 = Theme["Color Text"], TextWrapped = true, TextSize = 12, TextXAlignment = "Left", Font = Enum.Font.GothamBold, AutomaticSize = "Y"}), "Text")
        local DescL = InsertTheme(Create("TextLabel", {Size = UDim2.new(1, 0, 0, 0), Position = UDim2.new(0, 12, 0, 15), BackgroundTransparency = 1, TextWrapped = true, TextSize = 8, TextXAlignment = "Left", Text = Desc, RichText = true, AutomaticSize = "Y"}), "DarkText")
        local Frame = Make("Button", Parent, {Size = UDim2.new(1, 0, 0, 25), AutomaticSize = "Y", Name = "Option"})
        Make("Corner", Frame, UDim.new(0, 6))
        local LabelHolder = Create("Frame", Frame, {AutomaticSize = "Y", BackgroundTransparency = 1, Size = HolderSize, Position = UDim2.new(0, 10, 0), AnchorPoint = Vector2.new(0, 0)}, {
            Create("UIListLayout", {SortOrder = "LayoutOrder", VerticalAlignment = "Center", Padding = UDim.new(0, 2)}),
            Create("UIPadding", {PaddingLeft = UDim.new(0, 5), PaddingRight = UDim.new(0, 5), PaddingBottom = UDim.new(0, 5), PaddingTop = UDim.new(0, 5)}),
            TitleL, DescL,
        })
        local Label = {}
        function Label:SetTitle(NewTitle)
            if type(NewTitle) == "string" and NewTitle:gsub(" ", ""):len() > 0 then
                TitleL.Text = NewTitle
            end
        end
        function Label:SetDesc(NewDesc)
            if type(NewDesc) == "string" and NewDesc:gsub(" ", ""):len() > 0 then
                DescL.Visible = true
                DescL.Text = NewDesc
                LabelHolder.Position = UDim2.new(0, 10, 0)
                LabelHolder.AnchorPoint = Vector2.new(0, 0)
            else
                DescL.Visible = false
                DescL.Text = ""
                LabelHolder.Position = UDim2.new(0, 10, 0.5)
                LabelHolder.AnchorPoint = Vector2.new(0, 0.5)
            end
        end
        Label:SetTitle(Name)
        Label:SetDesc(Desc)
        return Frame, Label
    end

    function Tab:AddButton(Configs)
        local BName = Configs[1] or Configs.Name or Configs.Title or "Button"
        local BDesc = Configs.Desc or Configs.Description or ""
        local Callback = Funcs:GetCallback(Configs, 3)
        local Flag = Configs[4] or Configs.Flag or false
        local BIcon = Configs[5] or Configs.Icon or ""
        BIcon = Madzlib:GetIcon(BIcon)
        if not BIcon:find("rbxassetid://") or BIcon:gsub("rbxassetid://", ""):len() < 6 then
            BIcon = false
        end
        local Button, LabelFunc = ButtonFrame(Container, BName, BDesc)
        local Icon = Create("ImageLabel", Button, {Size = UDim2.new(0, 12, 0, 12), Position = UDim2.new(1, -25, 0.5), AnchorPoint = Vector2.new(1, 0.5), BackgroundTransparency = 1, Image = BIcon or "", Name = "Icon"})
        Button.Activated:Connect(function()
            Funcs:FireCallback(Callback)
            if Flag then
                SetFlag(Flag, not GetFlag(Flag))
            end
        end)
        local ButtonObj = {}
        function ButtonObj:Set(Val1, Val2)
            if type(Val1) == "string" and type(Val2) == "string" then
                LabelFunc:SetTitle(Val1)
                LabelFunc:SetDesc(Val2)
            elseif type(Val1) == "string" then
                LabelFunc:SetTitle(Val1)
            elseif type(Val1) == "function" then
                Callback = Val1
            end
        end
        function ButtonObj:Visible(...)
            Funcs:ToggleVisible(Button, ...)
        end
        function ButtonObj:Destroy()
            Button:Destroy()
        end
        return ButtonObj
    end

    function Tab:AddToggle(Configs)
        local TName = Configs[1] or Configs.Name or Configs.Title or "Toggle"
        local TDesc = Configs.Desc or Configs.Description or ""
        local Callback = Funcs:GetCallback(Configs, 3)
        local Flag = Configs[4] or Configs.Flag or false
        local Default = Configs[2] or Configs.Default or false
        if CheckFlag(Flag) then Default = GetFlag(Flag) end
        local Button, LabelFunc = ButtonFrame(Container, TName, TDesc, UDim2.new(1, -38))
        local ToggleHolder = InsertTheme(Create("Frame", Button, {Size = UDim2.new(0, 35, 0, 18), Position = UDim2.new(1, -10, 0.5), AnchorPoint = Vector2.new(1, 0.5), BackgroundColor3 = Theme["Color Stroke"]}), "Stroke")
        Make("Corner", ToggleHolder, UDim.new(0.5, 0))
        local ToggleSlider = InsertTheme(Create("Frame", ToggleHolder, {Size = UDim2.new(0, 14, 0, 14), Position = Default and UDim2.new(1, -2, 0.5) or UDim2.new(0, 2, 0.5), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Default and Theme["Color Theme"] or Theme["Color Dark Text"]}), "Theme")
        Make("Corner", ToggleSlider, UDim.new(1, 0))
        local function UpdateToggle()
            Default = not Default
            CreateTween({ToggleSlider, "Position", Default and UDim2.new(1, -2, 0.5) or UDim2.new(0, 2, 0.5), 0.2})
            CreateTween({ToggleSlider, "BackgroundColor3", Default and Theme["Color Theme"] or Theme["Color Dark Text"], 0.2})
            Funcs:FireCallback(Callback, Default)
            if Flag then
                SetFlag(Flag, Default)
            end
        end
        Make("Button", ToggleHolder).Activated:Connect(UpdateToggle)
        local Toggle = {}
        function Toggle:Set(Val1, Val2)
            if type(Val1) == "string" and type(Val2) == "string" then
                LabelFunc:SetTitle(Val1)
                LabelFunc:SetDesc(Val2)
            elseif type(Val1) == "string" then
                LabelFunc:SetTitle(Val1)
            elseif type(Val1) == "function" then
                Callback = Val1
            elseif type(Val1) == "boolean" then
                if Default ~= Val1 then
                    UpdateToggle()
                end
            end
        end
        function Toggle:Callback(...)
            Funcs:InsertCallback(Callback, ...)
        end
        function Toggle:Visible(...)
            Funcs:ToggleVisible(Button, ...)
        end
        function Toggle:Destroy()
            Button:Destroy()
        end
        return Toggle
    end

    function Tab:AddSlider(Configs)
        local SName = Configs[1] or Configs.Name or Configs.Title or "Slider!"
        local SDesc = Configs.Desc or Configs.Description or ""
        local Min = Configs[2] or Configs.MinValue or Configs.Min or 10
        local Max = Configs[3] or Configs.MaxValue or Configs.Max or 100
        local Increase = Configs[4] or Configs.Increase or 1
        local Callback = Funcs:GetCallback(Configs, 6)
        local Flag = Configs[7] or Configs.Flag or false
        local Default = Configs[5] or Configs.Default or 25
        if CheckFlag(Flag) then Default = GetFlag(Flag) end
        Min, Max = Min / Increase, Max / Increase
        local Button, LabelFunc = ButtonFrame(Container, SName, SDesc, UDim2.new(1, -180))
        local SliderBar = Create("Frame", Button, {Size = UDim2.new(1, -20, 0, 4), Position = UDim2.new(0, 10, 1, -8), AnchorPoint = Vector2.new(0, 1), BackgroundColor3 = Theme["Color Stroke"], Name = "Slider"})
        Make("Corner", SliderBar, UDim.new(1, 0))
        local SliderFill = InsertTheme(Create("Frame", SliderBar, {Size = UDim2.new(0, 0, 1, 0), BackgroundColor3 = Theme["Color Theme"], Name = "Fill"}), "Theme")
        Make("Corner", SliderFill, UDim.new(1, 0))
        local SliderIcon = Create("Frame", SliderFill, {Size = UDim2.new(0, 14, 0, 14), Position = UDim2.new(0, 0, 0.5), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Theme["Color Hub 2"], Name = "SliderIcon"})
        Make("Corner", SliderIcon, UDim.new(0.5, 0))
        Make("Stroke", SliderIcon)
        local LabelVal = Create("TextLabel", Button, {Size = UDim2.new(0, 30, 0, 10), Position = UDim2.new(1, -30, 1, -18), AnchorPoint = Vector2.new(0, 1), BackgroundTransparency = 1, Text = Default, TextColor3 = Theme["Color Text"], TextSize = 8, TextXAlignment = "Right", Name = "Value"})
        local UIScale = Create("UIScale", LabelVal)
        local BaseMousePos = Create("Frame", SliderBar, {Position = UDim2.new(0, 0, 0.5, 0), Visible = false})
        local function UpdateLabel(NewValue)
            local Number = tonumber(NewValue * Increase)
            Number = math.floor(Number * 100) / 100
            Default, LabelVal.Text = Number, tostring(Number)
            Funcs:FireCallback(Callback, Default)
        end
        local function ControlPos()
            local MousePos = Mouse
            local APos = MousePos.X - BaseMousePos.AbsolutePosition.X
            local ConfigureDpiPos = APos / SliderBar.AbsoluteSize.X
            local SliderPos = (ConfigureDpiPos - (SliderBar.AbsolutePosition.X - BaseMousePos.AbsolutePosition.X) / SliderBar.AbsoluteSize.X) / (SliderBar.AbsoluteSize.X / SliderFill.AbsoluteSize.X)
            UpdateLabel(math.clamp(SliderPos * Max, Min, Max))
            CreateTween({SliderFill, "Size", UDim2.fromScale(math.clamp(ConfigureDpiPos, 0, 1), 1), 0.1})
            CreateTween({SliderIcon, "Position", UDim2.fromScale(math.clamp(SliderPos, 0, 1), 0.5), 0.3, true})
        end
        local function SetSlider(NewVal)
            local Value = (math.clamp((NewVal or Default) / Increase, Min, Max) - Min) / (Max - Min)
            Default = (Value * (Max - Min)) + Min
            UpdateLabel(Default)
            CreateTween({SliderFill, "Size", UDim2.fromScale(Value, 1), 0.1})
            CreateTween({SliderIcon, "Position", UDim2.fromScale(Value, 0.5), 0.3, true})
        end
        SliderIcon.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                task.spawn(ControlPos)
                RunService.Heartbeat:Connect(ControlPos)
            end
        end)
        SliderIcon.InputEnded:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                RunService.Heartbeat:Disconnect()
            end
        end)
        SetSlider(Default)
        local Slider = {}
        function Slider:Set(NewVal1, NewVal2)
            if NewVal1 and NewVal2 then
                LabelFunc:SetTitle(NewVal1)
                LabelFunc:SetDesc(NewVal2)
            elseif type(NewVal1) == "string" then
                LabelFunc:SetTitle(NewVal1)
            elseif type(NewVal1) == "function" then
                Callback = NewVal1
            elseif type(NewVal1) == "number" then
                SetSlider(NewVal1)
            end
        end
        function Slider:Callback(...)
            Funcs:InsertCallback(Callback, ...)(tonumber(Default))
        end
        function Slider:Visible(...)
            Funcs:ToggleVisible(Button, ...)
        end
        function Slider:Destroy()
            Button:Destroy()
        end
        return Slider
    end

    function Tab:AddTextBox(Configs)
        local TName = Configs[1] or Configs.Name or Configs.Title or "Text Box"
        local TDesc = Configs.Desc or Configs.Description or ""
        local TDefault = Configs[2] or Configs.Default or ""
        local TPlaceholderText = Configs[5] or Configs.PlaceholderText or "Input"
        local TClearText = Configs[3] or Configs.ClearText or false
        local Callback = Funcs:GetCallback(Configs, 6)
        local Flag = Configs[7] or Configs.Flag or false
        local Button, LabelFunc = ButtonFrame(Container, TName, TDesc, UDim2.new(1, -38))
        local TextBoxInput = Create("TextBox", Button, {Size = UDim2.new(0, 35, 0, 18), Position = UDim2.new(1, -10, 0.5), AnchorPoint = Vector2.new(1, 0.5), BackgroundColor3 = Theme["Color Hub 2"], Text = TDefault, PlaceholderText = TPlaceholderText, ClearTextOnFocus = TClearText, TextColor3 = Theme["Color Text"], TextSize = 10, Font = Enum.Font.Gotham, Name = "TextBox"})
        Make("Corner", TextBoxInput, UDim.new(0.5, 0))
        Make("Stroke", TextBoxInput)
        local Pencil = Create("ImageLabel", TextBoxInput, {Size = UDim2.new(0, 10, 0, 10), Position = UDim2.new(0, 5, 0.5), AnchorPoint = Vector2.new(0, 0.5), BackgroundTransparency = 1, Image = "rbxassetid://10734883598", Name = "Pencil"})
        local function Input()
            local Text = TextBoxInput.Text
            if TextBoxInput.OnChanging then Text = TextBoxInput.OnChanging(Text) or Text end
            Funcs:FireCallback(Callback, Text)
            TextBoxInput.Text = Text
        end
        TextBoxInput.FocusLost:Connect(Input)
        Input()
        TextBoxInput.FocusLost:Connect(function()
            CreateTween({Pencil, "ImageColor3", Color3.fromRGB(255, 255, 255), 0.2})
        end)
        TextBoxInput.Focused:Connect(function()
            CreateTween({Pencil, "ImageColor3", Theme["Color Theme"], 0.2})
        end)
        TextBoxInput.OnChanging = false
        local TextBox = {}
        function TextBox:Set(Val1, Val2)
            if type(Val1) == "string" and type(Val2) == "string" then
                LabelFunc:SetTitle(Val1)
                LabelFunc:SetDesc(Val2)
            elseif type(Val1) == "string" then
                LabelFunc:SetTitle(Val1)
            elseif type(Val1) == "function" then
                Callback = Val1
            elseif type(Val1) == "boolean" then
                TextBoxInput.ClearTextOnFocus = Val1
            end
        end
        function TextBox:Visible(...)
            Funcs:ToggleVisible(Button, ...)
        end
        function TextBox:Destroy()
            Button:Destroy()
        end
        return TextBox
    end

    function Tab:AddDropdown(Configs)
        local DName = Configs[1] or Configs.Name or Configs.Title or "Dropdown"
        local DDesc = Configs.Desc or Configs.Description or ""
        local DOptions = Configs[2] or Configs.Options or {}
        local Callback = Funcs:GetCallback(Configs, 4)
        local Flag = Configs[5] or Configs.Flag or false
        local Default = Configs[3] or Configs.Default or DOptions[1]
        if CheckFlag(Flag) then Default = GetFlag(Flag) end
        local Button, LabelFunc = ButtonFrame(Container, DName, DDesc, UDim2.new(1, -38))
        local Dropdown = Create("TextButton", Button, {Size = UDim2.new(0, 35, 0, 18), Position = UDim2.new(1, -10, 0.5), AnchorPoint = Vector2.new(1, 0.5), BackgroundColor3 = Theme["Color Hub 2"], Text = "", TextColor3 = Theme["Color Text"], TextSize = 10, Font = Enum.Font.Gotham, Name = "Dropdown"})
        Make("Corner", Dropdown, UDim.new(0.5, 0))
        Make("Stroke", Dropdown)
        local DropText = InsertTheme(Create("TextLabel", Dropdown, {Size = UDim2.new(1, -10, 1), Position = UDim2.new(0, 5, 0), BackgroundTransparency = 1, Text = Default, TextColor3 = Theme["Color Text"], TextSize = 10, TextXAlignment = "Left", Font = Enum.Font.Gotham}), "Text")
        local Arrow = Create("ImageLabel", Dropdown, {Size = UDim2.new(0, 10, 0, 10), Position = UDim2.new(1, -5, 0.5), AnchorPoint = Vector2.new(1, 0.5), BackgroundTransparency = 1, Image = "rbxassetid://10709790948", Name = "Arrow"})
        local DropFrame = Create("ScrollingFrame", Dropdown, {Size = UDim2.new(0, 152, 0, 0), Position = UDim2.new(0, 0, 1, 0), AnchorPoint = Vector2.new(0, 0), BackgroundColor3 = Theme["Color Hub 2"], BorderSizePixel = 0, CanvasSize = UDim2.new(), ScrollBarThickness = 3, ScrollBarImageColor3 = Theme["Color Theme"], Name = "DropFrame"})
        Make("Corner", DropFrame, UDim.new(0.5, 0))
        Make("Stroke", DropFrame)
        local NoClickFrame = Create("TextButton", Dropdown, {Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, Text = "", Name = "NoClick"})
        Make("Corner", NoClickFrame, UDim.new(0.5, 0))
        local function GetFrameSize()
            local Count = 0
            for _, _ in pairs(DropFrame:GetChildren()) do
                if _.IsA(_, "TextButton") then
                    Count = Count + 1
                end
            end
            return UDim2.new(0, 152, 0, math.clamp(Count * 20, 0, 100))
        end
        local WaitClick = false
        local function Minimize()
            if WaitClick then return end
            WaitClick = true
            if NoClickFrame.Visible then
                Arrow.Image = "rbxassetid://10709791523"
                CreateTween({Arrow, "ImageColor3", Color3.fromRGB(255, 255, 255), 0.2})
                CreateTween({DropFrame, "Size", UDim2.new(0, 152, 0, 0), 0.2, true})
                NoClickFrame.Visible = false
            else
                NoClickFrame.Visible = true
                Arrow.Image = "rbxassetid://10709790948"
                CreateTween({Arrow, "ImageColor3", Theme["Color Theme"], 0.2})
                CreateTween({DropFrame, "Size", GetFrameSize(), 0.2, true})
            end
            WaitClick = false
        end
        Dropdown.Activated:Connect(Minimize)
        for _, Option in pairs(DOptions) do
            local DropButton = Create("TextButton", DropFrame, {Size = UDim2.new(1, 0, 0, 20), BackgroundColor3 = Theme["Color Hub 2"], Text = Option, TextColor3 = Theme["Color Text"], TextSize = 10, Font = Enum.Font.Gotham})
            Make("Button", DropButton)
            DropButton.Activated:Connect(function()
                DropText.Text = Option
                Minimize()
                Funcs:FireCallback(Callback, Option)
                if Flag then
                    SetFlag(Flag, Option)
                end
            end)
        end
        local function Rebuild()
            DropFrame.CanvasSize = UDim2.new(0, 0, 0, DropFrame.UIListLayout.AbsoluteContentSize.Y)
        end
        DropFrame.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(Rebuild)
        local DropdownObj = {}
        function DropdownObj:Set(Val1, Val2)
            if type(Val1) == "string" and type(Val2) == "string" then
                LabelFunc:SetTitle(Val1)
                LabelFunc:SetDesc(Val2)
            elseif type(Val1) == "string" then
                LabelFunc:SetTitle(Val1)
            elseif type(Val1) == "function" then
                Callback = Val1
            elseif type(Val1) == "table" then
                for _, v in DropFrame:GetChildren() do
                    if v:IsA("TextButton") then
                        v:Destroy()
                    end
                end
                for _, Option in pairs(Val1) do
                    local DropButton = Create("TextButton", DropFrame, {Size = UDim2.new(1, 0, 0, 20), BackgroundColor3 = Theme["Color Hub 2"], Text = Option, TextColor3 = Theme["Color Text"], TextSize = 10, Font = Enum.Font.Gotham})
                    Make("Button", DropButton)
                    DropButton.Activated:Connect(function()
                        DropText.Text = Option
                        Minimize()
                        Funcs:FireCallback(Callback, Option)
                        if Flag then
                            SetFlag(Flag, Option)
                        end
                    end)
                end
                Rebuild()
            end
        end
        function DropdownObj:Visible(...)
            Funcs:ToggleVisible(Button, ...)
        end
        function DropdownObj:Destroy()
            Button:Destroy()
        end
        return DropdownObj
    end

    function Tab:AddParagraph(Configs)
        local PName = Configs[1] or Configs.Title or "Paragraph"
        local PDesc = Configs[2] or Configs.Text or ""
        local Frame, LabelFunc = ButtonFrame(Container, PName, PDesc, UDim2.new(1, -20))
        local Paragraph = {}
        function Paragraph:Visible(...)
            Funcs:ToggleVisible(Frame, ...)
        end
        function Paragraph:Destroy()
            Frame:Destroy()
        end
        function Paragraph:SetTitle(Val)
            LabelFunc:SetTitle(GetStr(Val))
        end
        function Paragraph:SetDesc(Val)
            LabelFunc:SetDesc(GetStr(Val))
        end
        function Paragraph:Set(Val1, Val2)
            if Val1 and Val2 then
                LabelFunc:SetTitle(GetStr(Val1))
                LabelFunc:SetDesc(GetStr(Val2))
            elseif Val1 then
                LabelFunc:SetDesc(GetStr(Val1))
            end
        end
        return Paragraph
    end

    function Tab:AddSection(Configs)
        local SectionName = type(Configs) == "string" and Configs or Configs[1] or Configs.Name or Configs.Title or Configs.Section
        local SectionFrame = Create("Frame", Container, {Size = UDim2.new(1, 0, 0, 20), BackgroundTransparency = 1, Name = "Option"})
        local SectionLabel = InsertTheme(Create("TextLabel", SectionFrame, {Font = Enum.Font.GothamBold, Text = SectionName, TextColor3 = Theme["Color Text"], Size = UDim2.new(1, -25, 1, 0), Position = UDim2.new(0, 5), BackgroundTransparency = 1, TextSize = 12, TextXAlignment = "Left"}), "Text")
        local Section = {}
        function Section:Visible(Bool)
            if Bool == nil then
                SectionFrame.Visible = not SectionFrame.Visible
                return
            end
            SectionFrame.Visible = Bool
        end
        function Section:Destroy()
            SectionFrame:Destroy()
        end
        function Section:Set(New)
            if New then
                SectionLabel.Text = GetStr(New)
            end
        end
        return Section
    end

    function Tab:AddDiscordInvite(Configs)
        local Title = Configs[1] or Configs.Name or Configs.Title or "Discord"
        local Desc = Configs.Desc or Configs.Description or ""
        local Logo = Configs[2] or Configs.Logo or ""
        local Invite = Configs[3] or Configs.Invite or ""
        local InviteHolder = Create("Frame", Container, {Size = UDim2.new(1, 0, 0, 80), Name = "Option", BackgroundTransparency = 1})
        local InviteLabel = Create("TextLabel", InviteHolder, {Size = UDim2.new(1, 0, 0, 15), Position = UDim2.new(0, 5), TextColor3 = Color3.fromRGB(40, 150, 255), Font = Enum.Font.GothamBold, TextXAlignment = "Left", BackgroundTransparency = 1, TextSize = 10, Text = Title})
        local DescLabel = Create("TextLabel", InviteHolder, {Size = UDim2.new(1, 0, 0, 30), Position = UDim2.new(0, 5, 0, 15), TextColor3 = Theme["Color Dark Text"], Font = Enum.Font.Gotham, TextXAlignment = "Left", BackgroundTransparency = 1, TextSize = 8, Text = Desc, TextWrapped = true})
        local JoinButton = Create("TextButton", InviteHolder, {Size = UDim2.new(1, -14, 0, 16), Position = UDim2.new(0, 7, 1, -20), AnchorPoint = Vector2.new(0, 1), BackgroundColor3 = Color3.fromRGB(88, 101, 242), Text = "JOIN SERVER", TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.GothamBold, TextSize = 10})
        Make("Corner", JoinButton, UDim.new(0, 4))
        JoinButton.Activated:Connect(function()
            setclipboard("https://discord.gg/" .. Invite)
        end)
        local DiscordObj = {}
        function DiscordObj:Set(Val1, Val2)
            if type(Val1) == "string" and type(Val2) == "string" then
                InviteLabel.Text = Val1
                DescLabel.Text = Val2
            elseif type(Val1) == "string" then
                InviteLabel.Text = Val1
            end
        end
        function DiscordObj:Visible(...)
            Funcs:ToggleVisible(InviteHolder, ...)
        end
        function DiscordObj:Destroy()
            InviteHolder:Destroy()
        end
        return DiscordObj
    end

    function Tab:Destroy()
        TabSelect:Destroy()
        Container:Destroy()
    end

    table.insert(Madzlib.Tabs, {Cont = Container, func = Tab})
    return Tab
end

CloseButton.Activated:Connect(Window.CloseBtn)
MinimizeButton.Activated:Connect(Window.MinimizeBtn)
Madzlib:SetTheme(Madzlib.Save.Theme)

spawn(function()
    while true do
        local ScriptFile = Madzlib.Settings.ScriptFile
        if not db and ScriptFile and writefile then
            db = true
            task.wait(0.1)
            db = false
            local Success, Encoded = pcall(function()
                return HttpService:JSONEncode(Madzlib.Flags)
            end)
            if Success then
                local Success = pcall(writefile, ScriptFile, Encoded)
                if Success then
                    dbConnection:Fire("FileSaved", "Script-Flags", ScriptFile, Encoded)
                end
            end
        end
        task.wait(5)
    end
end)

return Madzlib
